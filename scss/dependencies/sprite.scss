/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$office-tour-name: 'office-tour';
$office-tour-x: 0px;
$office-tour-y: 477px;
$office-tour-offset-x: 0px;
$office-tour-offset-y: -477px;
$office-tour-width: 594px;
$office-tour-height: 385px;
$office-tour-total-width: 1370px;
$office-tour-total-height: 862px;
$office-tour-image: 'sprite.png';
$office-tour: (0px, 477px, 0px, -477px, 594px, 385px, 1370px, 862px, 'sprite.png', 'office-tour', );
$services-carousel-bg-name: 'services-carousel-bg';
$services-carousel-bg-x: 0px;
$services-carousel-bg-y: 0px;
$services-carousel-bg-offset-x: 0px;
$services-carousel-bg-offset-y: 0px;
$services-carousel-bg-width: 1370px;
$services-carousel-bg-height: 231px;
$services-carousel-bg-total-width: 1370px;
$services-carousel-bg-total-height: 862px;
$services-carousel-bg-image: 'sprite.png';
$services-carousel-bg: (0px, 0px, 0px, 0px, 1370px, 231px, 1370px, 862px, 'sprite.png', 'services-carousel-bg', );
$winn-logo-retina-name: 'winn-logo-retina';
$winn-logo-retina-x: 0px;
$winn-logo-retina-y: 231px;
$winn-logo-retina-offset-x: 0px;
$winn-logo-retina-offset-y: -231px;
$winn-logo-retina-width: 966px;
$winn-logo-retina-height: 246px;
$winn-logo-retina-total-width: 1370px;
$winn-logo-retina-total-height: 862px;
$winn-logo-retina-image: 'sprite.png';
$winn-logo-retina: (0px, 231px, 0px, -231px, 966px, 246px, 1370px, 862px, 'sprite.png', 'winn-logo-retina', );
$spritesheet-width: 1370px;
$spritesheet-height: 862px;
$spritesheet-image: 'sprite.png';
$spritesheet-sprites: ($office-tour, $services-carousel-bg, $winn-logo-retina, );
$spritesheet: (1370px, 862px, 'sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
